{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","gif","query","handleChange","e","_this","setState","target","value","handleSubmit","preventDefault","axios","get","concat","crossdomain","then","res","data","console","log","_this2","this","react_default","a","createElement","className","style","paddingTop","onSubmit","type","id","placeholder","onChange","map","g","display","src","images","fixed_height","url","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2RAsFeA,6MAhFbC,MAAQ,CACNC,IAAK,GACLC,MAAO,MAiBTC,aAAe,SAAAC,GACbC,EAAKC,SAAS,CACZJ,MAAOE,EAAEG,OAAOC,WAIpBC,aAAe,SAAAL,GACbA,EAAEM,iBACFC,IACGC,IADH,yCAAAC,OAGMR,EAAKL,MAAME,MAHjB,sDAKI,CAAEY,aAAa,IAEhBC,KAAK,SAAAC,GACJX,EAAKC,SAAS,CACZL,IAAKe,EAAIC,KAAKA,OAEhBC,QAAQC,IAAIH,EAAIC,KAAKA,4FAjCP,IAAAG,EAAAC,KAClBV,IACGC,IADH,yFAGI,CAAEE,aAAa,IAEhBC,KAAK,SAAAC,GACJI,EAAKd,SAAS,CACZL,IAAKe,EAAIC,KAAKA,OAEhBC,QAAQC,IAAIH,EAAIC,KAAKA,yCA4BzB,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,QACEC,UAAU,cACVC,MAAO,CAAEC,WAAY,QACrBC,SAAUP,KAAKZ,cAEfa,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,WAAjB,YACAH,EAAAC,EAAAC,cAAA,SACEK,KAAK,OACLJ,UAAU,eACVK,GAAG,QACHC,YAAY,eACZvB,MAAOa,KAAKrB,MAAME,MAClB8B,SAAUX,KAAKlB,gBAGnBmB,EAAAC,EAAAC,cAAA,UAAQK,KAAK,SAASJ,UAAU,wBAAhC,YAKHJ,KAAKrB,MAAMC,IAAIgC,IAAI,SAAAC,GAClB,OACEZ,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAAES,QAAS,WACrBb,EAAAC,EAAAC,cAAA,OAAKY,IAAKF,EAAEG,OAAOC,aAAaC,IAAKC,IAAI,mBAxErCC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC","file":"static/js/main.d310f332.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n//import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport axios from \"axios\";\n\nclass App extends Component {\n  state = {\n    gif: [],\n    query: \"\"\n  };\n\n  componentDidMount() {\n    axios\n      .get(\n        `http://api.giphy.com/v1/gifs/trending?api_key=W6j782MUgb8aXKhD289LHocpawNNNcaH&limit=5`,\n        { crossdomain: true }\n      )\n      .then(res => {\n        this.setState({\n          gif: res.data.data\n        });\n        console.log(res.data.data);\n      });\n  }\n\n  handleChange = e => {\n    this.setState({\n      query: e.target.value\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    axios\n      .get(\n        `http://api.giphy.com/v1/gifs/search?q=${\n          this.state.query\n        }&api_key=W6j782MUgb8aXKhD289LHocpawNNNcaH&limit=10`,\n        { crossdomain: true }\n      )\n      .then(res => {\n        this.setState({\n          gif: res.data.data\n        });\n        console.log(res.data.data);\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <form\n            className=\"form-inline\"\n            style={{ paddingTop: \"10px\" }}\n            onSubmit={this.handleSubmit}\n          >\n            <p>Gif Search: </p>\n            <div className=\"form-group mx-sm-3 mb-2\">\n              <label className=\"sr-only\">Password</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"query\"\n                placeholder=\"Search Query\"\n                value={this.state.query}\n                onChange={this.handleChange}\n              />\n            </div>\n            <button type=\"submit\" className=\"btn btn-primary mb-2\">\n              Search\n            </button>\n          </form>\n        </header>\n        {this.state.gif.map(g => {\n          return (\n            <div style={{ display: \"inline\" }}>\n              <img src={g.images.fixed_height.url} alt=\"gif\" />\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}